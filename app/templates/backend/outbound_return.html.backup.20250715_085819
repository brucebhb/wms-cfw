{% extends "base.html" %}

{% block styles %}
<link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/handsontable/13.0.0/handsontable.full.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css">
<!-- 添加自定义表格样式 -->
<link rel="stylesheet" href="{{ url_for('static', filename='css/simple-table.css') }}" type="text/css" />
<style>
    .batch-options {
        margin-bottom: 1rem;
    }
    #hot-container {
        height: 600px;
        overflow: visible;
        margin-bottom: 20px;
        margin-left: auto;
        margin-right: auto;
        position: relative;
    }
    /* 增加表格行高的样式 */
    .handsontable td {
        height: 32px !important;
        line-height: 28px !important;
        padding: 4px 6px !important;
        font-size: 14px !important;
        text-align: center !important;
        vertical-align: middle !important;
    }
    /* 增加表头行高 */
    .handsontable th {
        height: 36px !important;
        padding: 6px 6px !important;
        font-size: 14px !important;
        font-weight: bold !important;
        text-align: center !important;
        vertical-align: middle !important;
    }
    /* 确保所有单元格包括输入框内的内容都居中 */
    .handsontable .htDimmed,
    .handsontable .current,
    .handsontable .htCenter {
        text-align: center !important;
        vertical-align: middle !important;
    }
    /* 确保数字输入也居中 */
    .handsontable input[type="text"],
    .handsontable input[type="number"],
    .handsontable input[type="date"] {
        text-align: center !important;
    }

    /* 设置库存选择表格中重量和体积列的宽度 */
    #inventoryTable th:nth-child(11),
    #inventoryTable td:nth-child(11),
    #inventoryTable th:nth-child(12),
    #inventoryTable td:nth-child(12) {
        width: 60px !important;
        max-width: 60px !important;
    }

    /* 设置库存选择表格中报关行和出境模式的列宽 */
    #inventoryTable th:nth-child(13),
    #inventoryTable td:nth-child(13),
    #inventoryTable th:nth-child(14),
    #inventoryTable td:nth-child(14) {
        width: 80px !important;
        max-width: 80px !important;
    }

    /* 设置库存选择表格中送货干线车和跟单客服的列宽 */
    #inventoryTable th:nth-child(15),
    #inventoryTable td:nth-child(15),
    #inventoryTable th:nth-child(16),
    #inventoryTable td:nth-child(16) {
        width: 80px !important;
        max-width: 80px !important;
    }

    /* 设置库存选择表格中入库车牌和客户名称的列宽 */
    #inventoryTable th:nth-child(2),
    #inventoryTable td:nth-child(2),
    #inventoryTable th:nth-child(3),
    #inventoryTable td:nth-child(3) {
        width: 100px !important;
        max-width: 100px !important;
    }

    /* 设置输入框宽度 */
    #inventoryTable .inventory-weight,
    #inventoryTable .inventory-volume {
        width: 50px !important;
        font-size: 12px !important;
        padding: 2px 4px !important;
    }

    #inventoryTable .outbound-pallet,
    #inventoryTable .outbound-package {
        width: 50px !important;
        font-size: 12px !important;
        padding: 2px 4px !important;
    }

    #inventoryTable .inventory-export-mode,
    #inventoryTable .inventory-customs-broker,
    #inventoryTable .inventory-delivery-truck,
    #inventoryTable .inventory-service-staff {
        width: 70px !important;
        font-size: 12px !important;
        padding: 2px 4px !important;
    }

    #inventoryTable .inventory-remark1,
    #inventoryTable .inventory-remark2 {
        width: 120px !important;
        font-size: 12px !important;
        padding: 2px 4px !important;
    }

    /* 弹窗样式 */
    .custom-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 10000;
        justify-content: center;
        align-items: center;
    }

    /* 添加关键样式来解决模态框可能被覆盖的问题 */
    #inventoryModal {
        z-index: 10001 !important; /* 确保在最顶层 */
    }

    #inventoryModal .modal-content {
        background-color: white;
        min-width: 80%;
        max-height: 90vh;
        position: relative;
        z-index: 10002 !important; /* 确保内容不被覆盖 */
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    }

    /* 模态框固定的标题栏和底部按钮样式 */
    .modal-header-fixed {
        position: sticky;
        top: 0;
        background: white;
        z-index: 1030;
        padding: 15px 15px 0;
        border-bottom: 1px solid #dee2e6;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
    }

    .modal-footer-fixed {
        position: sticky;
        bottom: 0;
        background: white;
        z-index: 1030;
        padding: 15px;
        border-top: 1px solid #dee2e6;
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 4px;
        text-align: right;
    }

    .modal-close {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
        z-index: 1040; /* 确保比其他元素高 */
        color: #555;
        transition: color 0.2s;
    }

    .modal-close:hover {
        color: #000;
    }

    .modal-header {
        padding-right: 30px; /* 给关闭按钮留出空间 */
    }

    .modal-success .modal-header {
        color: #28a745;
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 10px;
        margin-bottom: 15px;
    }

    .modal-error .modal-header {
        color: #dc3545;
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 10px;
        margin-bottom: 15px;
    }

    .modal-header i {
        font-size: 1.5em;
        margin-right: 10px;
    }

    .modal-footer {
        padding-top: 15px;
        margin-top: 15px;
        border-top: 1px solid #e9ecef;
        text-align: right;
    }

    /* 确保模态框内的按钮可点击 */
    #inventoryModal button {
        position: relative;
        z-index: 10003 !important;
        pointer-events: auto !important;
        cursor: pointer !important;
    }

    /* 设置库存选择表格中备注1和备注2的列宽 */
    #inventoryTable th:nth-child(17),
    #inventoryTable td:nth-child(17),
    #inventoryTable th:nth-child(18),
    #inventoryTable td:nth-child(18) {
        width: 150px !important;
        max-width: none !important;
    }
    .handsontable .required {
        color: #ff0000;
    }
    .btn-action {
        margin-right: 8px;
    }
    .file-upload {
        display: none;
    }
    .error-message {
        color: #dc3545;
        margin-top: 8px;
        text-align: center;
    }
    .success-message {
        color: #28a745;
        margin-top: 8px;
        text-align: center;
    }
    /* 自定义表头样式 */
    .handsontable .htColHeader .colHeader {
        position: relative;
    }
    /* 列宽拖动样式 */
    .handsontable .manualColumnResizer {
        cursor: col-resize;
        background: #ddd;
    }
    .handsontable .manualColumnResizer.active,
    .handsontable .manualColumnResizer:hover {
        background: #8c8c8c;
    }
    /* 内容区域居中 */
    .card-body {
        text-align: center;
    }
    /* 按钮组居中 */
    .action-buttons {
        display: flex;
        justify-content: center;
        margin-bottom: 1rem;
    }
    /* 提示信息容器 */
    .info-container {
        background-color: #fff8e1;
        padding: 10px 15px;
        border-radius: 4px;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        border: 1px solid #ffe082;
    }
    .info-container .icon {
        margin-right: 10px;
        color: #f57c00;
    }
    .info-container .text {
        flex: 1;
        font-size: 14px;
        color: #333;
    }
    /* 表单标签中的必填项标识 */
    .required {
        color: #dc3545 !important;
        font-weight: bold;
    }
    /* 加载指示器样式 */
    .loading-indicator {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(255, 255, 255, 0.9);
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        display: none;
    }
    .loading-indicator.show {
        display: block;
    }
    .spinner {
        border: 3px solid #f3f3f3;
        border-top: 3px solid #007bff;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin: 0 auto 10px;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
{% endblock %}

{% block title %}后端仓返回前端仓{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- 页面标题 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-undo me-2"></i>后端仓返回前端仓
                        <span class="badge bg-light text-primary ms-2">Backend to Frontend</span>
                    </h3>
                </div>
                <div class="card-body">
                    <p class="card-text mb-0">
                        <i class="fas fa-info-circle me-1"></i>
                        凭祥北投仓货物返回前端仓，继续配送流程
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- 公共信息表单 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="fas fa-clipboard-list me-2"></i>公共信息
                    </h5>
                </div>
                <div class="card-body">
                    <form id="commonForm">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label for="outbound_time" class="form-label">出库时间 <span class="required">*</span></label>
                                    <input type="datetime-local" class="form-control" id="outbound_time" name="outbound_time" required>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label for="outbound_plate" class="form-label">出库/出境车牌 <span class="required">*</span></label>
                                    <input type="text" class="form-control" id="outbound_plate" name="outbound_plate" required>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label for="target_warehouse" class="form-label">目标前端仓 <span class="required">*</span></label>
                                    <select class="form-control" id="target_warehouse" name="target_warehouse" required>
                                        <option value="">请选择目标仓库</option>
                                        <option value="平湖仓">平湖仓</option>
                                        <option value="昆山仓">昆山仓</option>
                                        <option value="成都仓">成都仓</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label for="contact_window" class="form-label">联络窗口</label>
                                    <input type="text" class="form-control" id="contact_window" name="contact_window" readonly>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label for="warehouse_address" class="form-label">前端仓地址</label>
                                    <input type="text" class="form-control" id="warehouse_address" name="warehouse_address" readonly>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- 表格区域 -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="fas fa-table me-2"></i>返回前端仓货物明细
                    </h5>
                </div>
                <div class="card-body">
                    <!-- 操作说明 -->
                    <div class="info-container">
                        <div class="icon">
                            <i class="fas fa-info-circle"></i>
                        </div>
                        <div class="text">
                            <span class="required">*</span> 为必填项。公共信息中<span class="required">出库时间、出库/出境车牌、目标前端仓</span>必填；表格中<span class="required">客户名称、识别编码、入库车牌</span>必填，<span class="required">板数</span>与<span class="required">件数</span>至少填写一项。其他字段为选填项
                        </div>
                    </div>

                    <!-- 操作按钮 -->
                    <div class="action-buttons">
                        <button type="button" class="btn btn-info btn-action" onclick="openInventoryModal()">
                            <i class="fas fa-warehouse"></i> 选择库存
                        </button>
                        <button type="button" class="btn btn-secondary btn-action" onclick="clearTable()">
                            <i class="fas fa-eraser"></i> 清空表格
                        </button>
                        <button type="button" class="btn btn-primary btn-action" onclick="saveOutboundRecords()">
                            <i class="fas fa-save"></i> 批量保存
                        </button>
                        <button type="button" class="btn btn-warning btn-action" onclick="testErrorMessage()" style="margin-left: 10px;">
                            <i class="fas fa-bug"></i> 测试错误提示
                        </button>
                    </div>

                    <!-- 表格容器 -->
                    <div id="hot-container" style="position: relative;">
                        <!-- 加载指示器 -->
                        <div id="loadingIndicator" class="loading-indicator">
                            <div class="spinner"></div>
                            <div>正在加载表格...</div>
                        </div>
                    </div>

                    <!-- 错误和成功消息显示区域 -->
                    <div id="messageArea" style="margin-top: 15px;"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- 库存选择模态框 -->
    <div id="inventoryModal" class="custom-modal">
        <div class="modal-content" style="max-width: 95%; width: auto; max-height: 90vh; display: flex; flex-direction: column;">
            <!-- 固定的标题栏 -->
            <div class="modal-header-fixed">
                <span class="modal-close" onclick="document.getElementById('inventoryModal').style.display='none'">&times;</span>
                <div class="modal-header">
                    <i class="fas fa-boxes"></i> 后端仓库存选择
                </div>
                <div class="search-container mb-3">
                    <input type="text" class="form-control" id="inventorySearch" placeholder="输入关键字搜索库存...">
                </div>
            </div>

            <!-- 可滚动的内容区域 -->
            <div class="modal-body" style="overflow-y: auto; flex: 1;">
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="inventoryTable" width="100%">
                        <thead>
                            <tr>
                                <th>选择</th>
                                <th>客户名称</th>
                                <th>入库车牌</th>
                                <th>识别编码</th>
                                <th>订单类型</th>
                                <th>库存板数</th>
                                <th>库存件数</th>
                                <th>全出</th>
                                <th>出库板数</th>
                                <th>出库件数</th>
                                <th>重量</th>
                                <th>体积</th>
                                <th>出境模式</th>
                                <th>报关行</th>
                                <th>送货干线车</th>
                                <th>跟单客服</th>
                                <th>备注1</th>
                                <th>备注2</th>
                            </tr>
                        </thead>
                        <tbody id="inventoryTableBody">
                            <!-- 这里将由JavaScript动态填充库存数据 -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- 固定的底部按钮 -->
            <div class="modal-footer-fixed">
                <button type="button" class="btn btn-secondary" onclick="document.getElementById('inventoryModal').style.display='none'">取消</button>
                <button type="button" class="btn btn-primary" id="confirmInventorySelection">确认选择</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="https://cdn.bootcdn.net/ajax/libs/handsontable/13.0.0/handsontable.full.min.js"></script>
<!-- DataTables库 -->
<script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"></script>
<script>
// 全局变量
let hot = null;
let inventoryData = [];

// 页面加载完成后初始化
$(document).ready(function() {
    console.log('页面加载完成，开始初始化...');

    // 设置默认出库时间
    setDefaultDateTime();

    // 初始化表格
    initTable();

    // 绑定目标仓库变化事件
    $('#target_warehouse').on('change', updateWarehouseInfo);

    // 绑定确认选择按钮事件
    const confirmBtn = document.getElementById('confirmInventorySelection');
    if (confirmBtn) {
        confirmBtn.onclick = confirmInventorySelection;
    }

    // 设置库存搜索功能
    const searchInput = document.getElementById('inventorySearch');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            if (inventoryTable) {
                inventoryTable.search(this.value).draw();
            }
        });
    }

    console.log('页面初始化完成');
});

// 注意：showSuccess 和 showError 函数在页面底部定义

// 显示加载指示器
function showLoadingIndicator() {
    console.log('显示加载指示器');
    // 简单的控制台输出，可以后续改为更美观的加载指示器
}

// 隐藏加载指示器
function hideLoadingIndicator() {
    console.log('隐藏加载指示器');
    // 简单的控制台输出，可以后续改为更美观的加载指示器
}

// 清空消息
function clearMessages() {
    console.log('清空消息');
    // 简单的控制台输出，可以后续改为清空消息显示
}

// 重写确认库存选择函数
function confirmInventorySelection() {
    console.log("执行确认库存选择");
    if (!inventoryTable) {
        console.error('DataTables实例不存在');
        alert('表格未初始化，请刷新页面后重试');
        return;
    }

    const checkedRows = $('#inventoryTable .inventory-selector:checked').closest('tr');
    console.log("选中行数:", checkedRows.length);

    if (checkedRows.length === 0) {
        alert('请至少选择一条库存记录');
        return;
    }

    const selectedItems = [];
    let hasInvalidItem = false;

    // 收集选中的数据
    checkedRows.each(function() {
        const row = $(this);
        const rowData = inventoryTable.row(row).data();

        if (!rowData) {
            console.error('找不到对应的库存数据');
            return;
        }

        // 获取用户输入的数据
        const outboundPalletCount = parseInt(row.find('.outbound-pallet').val()) || 0;
        const outboundPackageCount = parseInt(row.find('.outbound-package').val()) || 0;
        const weight = parseFloat(row.find('.inventory-weight').val()) || 0;
        const volume = parseFloat(row.find('.inventory-volume').val()) || 0;
        const exportMode = row.find('.inventory-export-mode').val() || '一般贸易';
        const customsBroker = row.find('.inventory-customs-broker').val() || '默认报关行';
        const deliveryTruck = row.find('.inventory-delivery-truck').val() || '';
        const serviceStaff = row.find('.inventory-service-staff').val() || '默认客服';
        const remark1 = row.find('.inventory-remark1').val() || '';
        const remark2 = row.find('.inventory-remark2').val() || '';

        // 验证至少有一项出库数量
        if (outboundPalletCount === 0 && outboundPackageCount === 0) {
            alert(`请为 ${rowData.customer_name} - ${rowData.plate_number} 至少输入板数或件数中的一项出库数量`);
            hasInvalidItem = true;
            return;
        }

        // 验证出库数量不超过库存
        if (outboundPalletCount > (rowData.pallet_count || 0)) {
            alert(`${rowData.customer_name} 的出库板数不能超过库存板数 ${rowData.pallet_count || 0}`);
            hasInvalidItem = true;
            return;
        }

        if (outboundPackageCount > (rowData.package_count || 0)) {
            alert(`${rowData.customer_name} 的出库件数不能超过库存件数 ${rowData.package_count || 0}`);
            hasInvalidItem = true;
            return;
        }

        // 创建表格行数据（数组格式）
        const tableRowData = [
            rowData.customer_name || '',           // 0: 客户名称
            rowData.identification_code || '',     // 1: 识别编码
            rowData.plate_number || '',            // 2: 入库车牌
            rowData.order_type || '普通订单',      // 3: 订单类型
            outboundPalletCount,                   // 4: 出库板数
            outboundPackageCount,                  // 5: 出库件数
            weight,                                // 6: 重量
            volume,                                // 7: 体积
            exportMode,                            // 8: 出境模式
            customsBroker,                         // 9: 报关行
            deliveryTruck,                         // 10: 送货干线车
            serviceStaff,                          // 11: 跟单客服
            remark1,                               // 12: 备注1
            remark2                                // 13: 备注2
        ];

        selectedItems.push(tableRowData);
    });

    if (hasInvalidItem) {
        return; // 如果有无效项，不继续处理
    }

    // 关闭模态框
    document.getElementById('inventoryModal').style.display = 'none';

    // 将数据添加到出库表格
    const hot = window.hot;
    if (!hot) {
        console.error('Handsontable实例不存在');
        alert('无法获取表格实例，请刷新页面后重试');
        return;
    }

    console.log("准备添加数据到热表格");

    // 使用Handsontable API添加数据
    try {
        // 准备数据数组
        const dataArray = selectedItems.map(item => {
            console.log("准备添加到表格的项目:", item);
            return [
                item[0],  // 客户名称
                item[1],  // 识别编码
                item[2],  // 入库车牌
                item[3],  // 订单类型
                item[4],  // 出库板数
                item[5],  // 出库件数
                item[6],  // 重量
                item[7],  // 体积
                item[8],  // 出境模式
                item[9],  // 报关行
                item[10], // 送货干线车
                item[11], // 跟单客服
                item[12], // 备注1
                item[13]  // 备注2
            ];
        });

        // 获取当前数据
        const currentData = hot.getSourceData();

        // 找到第一个空行的位置
        let insertIndex = 0;
        for (let i = 0; i < currentData.length; i++) {
            if (!currentData[i][0] || currentData[i][0] === '') {
                insertIndex = i;
                break;
            }
        }

        // 如果没有找到空行，在末尾添加
        if (insertIndex === 0 && currentData[0] && currentData[0][0]) {
            insertIndex = currentData.length;
        }

        // 合并数据
        const newData = [...currentData];
        dataArray.forEach((rowData, index) => {
            if (insertIndex + index < newData.length) {
                newData[insertIndex + index] = rowData;
            } else {
                newData.push(rowData);
            }
        });

        // 加载新数据
        hot.loadData(newData);
        console.log(`已将 ${selectedItems.length} 条库存记录添加到表格`);

        showSuccess(`已添加 ${selectedItems.length} 条库存记录到表格`);
    } catch (error) {
        console.error('添加数据到表格时出错:', error);
        showError('添加数据到表格时出错: ' + error.message);
    }
}

// 设置默认日期时间
function setDefaultDateTime() {
    const now = new Date();
    const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
    document.getElementById('outbound_time').value = localDateTime;
    console.log('默认出库时间已设置:', localDateTime);
}

// 更新仓库信息
function updateWarehouseInfo() {
    const warehouseSelect = document.getElementById('target_warehouse');
    const addressInput = document.getElementById('warehouse_address');
    const contactInput = document.getElementById('contact_window');

    const selectedWarehouse = warehouseSelect.value;

    if (!selectedWarehouse) {
        addressInput.value = '';
        contactInput.value = '';
        return;
    }

    // 通过API获取收货人信息
    fetch(`/api/receiver/by_warehouse/${encodeURIComponent(selectedWarehouse)}`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.receiver) {
                addressInput.value = data.receiver.address || '';
                contactInput.value = data.receiver.contact || '';
                console.log(`已自动填充 ${selectedWarehouse} 的收货人信息`);
            } else {
                addressInput.value = '';
                contactInput.value = '';
                console.warn(`未找到 ${selectedWarehouse} 的收货人信息`);
            }
        })
        .catch(error => {
            console.error('获取收货人信息失败:', error);
            addressInput.value = '';
            contactInput.value = '';
        });
}

// 用于存储DataTables实例
var inventoryTable = null;

// 重写库存选择模态框打开函数
function openInventoryModal() {
    console.log('打开DataTables库存选择模态框');

    // 显示模态框
    document.getElementById('inventoryModal').style.display = 'flex';

    // 检查DataTable是否已初始化
    if ($.fn.DataTable.isDataTable('#inventoryTable')) {
        console.log('DataTables已初始化，正在重新加载数据');
        // 重新加载数据
        inventoryTable.ajax.reload();
        return;
    }

    console.log('初始化DataTables');

    // 初始化DataTables
    inventoryTable = $('#inventoryTable').DataTable({
        ajax: {
            url: '/api/backend/inventory',
            type: 'GET',
            dataSrc: function(json) {
                console.log('收到库存数据:', json);
                if (json.success && json.data) {
                    return json.data;
                } else {
                    console.error('获取库存数据失败:', json.message);
                    return [];
                }
            },
            error: function(xhr, error, thrown) {
                console.error('AJAX请求失败:', error, thrown);
                // 使用模拟数据作为备选
                const mockData = [
                    {
                        id: 1,
                        customer_name: '测试客户A',
                        plate_number: 'TEST001',
                        identification_code: 'TEST001-20250105-001',
                        order_type: '整车',
                        pallet_count: 5,
                        package_count: 50,
                        weight: 1200.5,
                        volume: 15.8,
                        export_mode: '普通',
                        customs_broker: '报关行A',
                        delivery_truck: '桂A12345',
                        service_staff: '张三',
                        remark1: '',
                        remark2: ''
                    },
                    {
                        id: 2,
                        customer_name: '测试客户B',
                        plate_number: 'TEST002',
                        identification_code: 'TEST002-20250105-002',
                        order_type: '零担',
                        pallet_count: 2,
                        package_count: 20,
                        weight: 800.0,
                        volume: 10.0,
                        export_mode: '快速',
                        customs_broker: '报关行B',
                        delivery_truck: '桂B67890',
                        service_staff: '李四',
                        remark1: '',
                        remark2: ''
                    },
                    {
                        id: 3,
                        customer_name: '测试客户C',
                        plate_number: 'TEST003',
                        identification_code: 'TEST003-20250105-003',
                        order_type: '快递',
                        pallet_count: 1,
                        package_count: 10,
                        weight: 450.0,
                        volume: 6.0,
                        export_mode: '特殊',
                        customs_broker: '报关行C',
                        delivery_truck: '桂C11111',
                        service_staff: '王五',
                        remark1: '',
                        remark2: ''
                    }
                ];

                // 清空表格并添加模拟数据
                inventoryTable.clear();
                inventoryTable.rows.add(mockData);
                inventoryTable.draw();
            }
        },
        columns: [
            {
                data: null,
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="checkbox" class="inventory-selector" data-index="${meta.row}">`;
                }
            },
            { data: 'customer_name', className: 'text-center' },
            { data: 'plate_number', className: 'text-center' },
            { data: 'identification_code', className: 'text-center' },
            { data: 'order_type', className: 'text-center' },
            { data: 'pallet_count', className: 'text-center' },
            { data: 'package_count', className: 'text-center' },
            {
                data: null,
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<button type="button" class="btn btn-sm btn-outline-primary btn-full-out"
                            data-pallet="${row.pallet_count || 0}"
                            data-package="${row.package_count || 0}"
                            data-index="${meta.row}">全出</button>`;
                }
            },
            {
                data: null,
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="number" class="form-control form-control-sm outbound-pallet"
                           min="0" max="${row.pallet_count || 0}" value="0"
                           onchange="validateOutboundQuantity(this, ${row.pallet_count || 0}, 'pallet')">`;
                }
            },
            {
                data: null,
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="number" class="form-control form-control-sm outbound-package"
                           min="0" max="${row.package_count || 0}" value="0"
                           onchange="validateOutboundQuantity(this, ${row.package_count || 0}, 'package')">`;
                }
            },
            {
                data: 'weight',
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="number" class="form-control form-control-sm inventory-weight"
                           min="0" step="0.01" value="${data || 0}">`;
                }
            },
            {
                data: 'volume',
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="number" class="form-control form-control-sm inventory-volume"
                           min="0" step="0.01" value="${data || 0}">`;
                }
            },
            {
                data: 'export_mode',
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<select class="form-control form-control-sm inventory-export-mode">
                        <option value="普通" ${(data === '普通' || !data) ? 'selected' : ''}>普通</option>
                        <option value="快速" ${data === '快速' ? 'selected' : ''}>快速</option>
                        <option value="特殊" ${data === '特殊' ? 'selected' : ''}>特殊</option>
                        <option value="其他" ${data === '其他' ? 'selected' : ''}>其他</option>
                    </select>`;
                }
            },
            {
                data: 'customs_broker',
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="text" class="form-control form-control-sm inventory-customs-broker"
                           value="${data || ''}">`;
                }
            },
            {
                data: 'delivery_truck',
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="text" class="form-control form-control-sm inventory-delivery-truck"
                           value="${data || ''}">`;
                }
            },
            {
                data: 'service_staff',
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="text" class="form-control form-control-sm inventory-service-staff"
                           value="${data || ''}">`;
                }
            },
            {
                data: 'remark1',
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="text" class="form-control form-control-sm inventory-remark1"
                           value="${data || ''}">`;
                }
            },
            {
                data: 'remark2',
                orderable: false,
                className: 'text-center',
                render: function(data, type, row, meta) {
                    return `<input type="text" class="form-control form-control-sm inventory-remark2"
                           value="${data || ''}">`;
                }
            }
        ],
        pageLength: 10,
        lengthChange: false,
        searching: false,
        info: false,
        language: {
            emptyTable: "暂无库存数据",
            zeroRecords: "没有找到匹配的记录",
            paginate: {
                first: "首页",
                last: "末页",
                next: "下一页",
                previous: "上一页"
            }
        },
        drawCallback: function(settings) {
            console.log('DataTables绘制完成');
            // 绑定全出按钮事件
            bindFullOutEvents();
        }
    });
}

// 初始化表格
function initTable() {
    console.log('开始初始化表格...');
    console.time('初始化表格');

    showLoadingIndicator();

    const container = document.getElementById('hot-container');
    if (!container) {
        console.error('找不到表格容器');
        hideLoadingIndicator();
        showError('找不到表格容器，请刷新页面重试');
        return;
    }

    // 检查Handsontable是否已加载
    if (typeof Handsontable === 'undefined') {
        console.error('Handsontable库未加载');
        hideLoadingIndicator();
        showError('表格组件未加载，请刷新页面重试');
        return;
    }

    try {
        // 表格配置选项
        const options = {
            data: createInitialData(10),
            columns: [
                {
                    type: 'text',
                    title: '客户名称 *',
                    width: 120
                },
                {
                    type: 'text',
                    title: '识别编码 *',
                    width: 170
                },
                {
                    type: 'text',
                    title: '入库车牌 *',
                    width: 120
                },
                {
                    type: 'dropdown',
                    title: '订单类型 *',
                    width: 140,
                    source: ['整车', '零担', '快递', '自提', '其他']
                },
                {
                    type: 'numeric',
                    title: '出库板数 *',
                    width: 100
                },
                {
                    type: 'numeric',
                    title: '出库件数 *',
                    width: 100
                },
                {
                    type: 'numeric',
                    title: '重量(kg)',
                    width: 80,
                    numericFormat: {
                        pattern: '0,0.00',
                        culture: 'zh-CN'
                    }
                },
                {
                    type: 'numeric',
                    title: '体积(m³)',
                    width: 80,
                    numericFormat: {
                        pattern: '0,0.00',
                        culture: 'zh-CN'
                    }
                },
                {
                    type: 'dropdown',
                    title: '出境模式 *',
                    width: 100,
                    source: ['普通', '快速', '特殊', '其他']
                },
                {
                    type: 'text',
                    title: '报关行 *',
                    width: 100
                },
                {
                    type: 'text',
                    title: '跟单客服 *',
                    width: 90
                },
                {
                    type: 'text',
                    title: '备注1',
                    width: 170
                },
                {
                    type: 'text',
                    title: '备注2',
                    width: 170
                }
            ],
            minRows: 10,
            minSpareRows: 2,
            contextMenu: true,
            colHeaders: ['客户名称 *', '识别编码 *', '入库车牌 *', '订单类型', '出库板数 *', '出库件数 *', '重量(kg)', '体积(m³)', '出境模式', '报关行', '跟单客服', '备注1', '备注2'],
            rowHeaders: true,
            width: '100%',
            height: 600,
            stretchH: 'none',
            manualColumnResize: true,
            manualRowResize: true,
            licenseKey: 'non-commercial-and-evaluation',
            afterInit: function() {
                console.log('表格初始化完成');
                hideLoadingIndicator();
            }
        };

        // 创建表格
        hot = new Handsontable(container, options);
        window.hot = hot; // 保存到全局变量
        console.log('表格创建成功');

        console.timeEnd('初始化表格');

    } catch (error) {
        console.error('创建表格时出错:', error);
        hideLoadingIndicator();
        showError('表格创建失败: ' + error.message);
    }
}



// 验证出库数量不超过库存数量
function validateOutboundQuantity(input, maxValue, type) {
    const value = parseInt(input.value) || 0;
    if (value < 0) {
        input.value = 0;
        alert(`${type === 'pallet' ? '出库板数' : '出库件数'}不能为负数`);
        return;
    }
    if (value > maxValue) {
        input.value = maxValue;
        alert(`${type === 'pallet' ? '出库板数' : '出库件数'}不能超过库存数量 ${maxValue}`);
        return;
    }
}

// 绑定全出按钮事件
function bindFullOutEvents() {
    // 使用事件委托绑定全出按钮事件
    $(document).off('click', '.btn-full-out').on('click', '.btn-full-out', function() {
        const button = $(this);
        const row = button.closest('tr');
        const palletCount = parseInt(button.attr('data-pallet')) || 0;
        const packageCount = parseInt(button.attr('data-package')) || 0;

        // 填入全部数量
        row.find('.outbound-pallet').val(palletCount);
        row.find('.outbound-package').val(packageCount);
        row.find('.inventory-selector').prop('checked', true);

        console.log(`全出操作: 板数=${palletCount}, 件数=${packageCount}`);
    });
}

// 清空表格
function clearTable() {
    if (hot) {
        hot.loadData(createInitialData(10));
        hot.render();
        clearMessages();
        console.log('表格已清空');
    }
}

// 创建初始数据
function createInitialData(rows) {
    return Array.from({ length: rows }, () => [
        '', // 客户名称
        '', // 识别编码
        '', // 入库车牌
        '', // 订单类型
        '', // 出库板数
        '', // 出库件数
        '', // 重量
        '', // 体积
        '', // 出境模式
        '', // 报关行
        '', // 跟单客服
        '', // 备注1
        ''  // 备注2
    ]);
}

// 显示加载指示器
function showLoadingIndicator() {
    const indicator = document.getElementById('loadingIndicator');
    if (indicator) {
        indicator.classList.add('show');
    }
}

// 隐藏加载指示器
function hideLoadingIndicator() {
    const indicator = document.getElementById('loadingIndicator');
    if (indicator) {
        indicator.classList.remove('show');
    }
}

// 显示错误消息
function showError(message) {
    console.log('显示错误消息:', message);

    // 优先使用页面消息区域
    const messageArea = document.getElementById('messageArea');
    if (messageArea) {
        messageArea.innerHTML = `<div class="alert alert-danger" style="margin-top: 10px;">
            <i class="fas fa-exclamation-triangle"></i> ${message}
        </div>`;

        // 滚动到消息区域
        messageArea.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    } else {
        // 备用方案：使用alert
        console.warn('messageArea元素不存在，使用alert显示错误');
        alert('错误: ' + message);
    }
}

// 显示成功消息
function showSuccess(message) {
    console.log('显示成功消息:', message);

    // 优先使用页面消息区域
    const messageArea = document.getElementById('messageArea');
    if (messageArea) {
        messageArea.innerHTML = `<div class="alert alert-success" style="margin-top: 10px;">
            <i class="fas fa-check-circle"></i> ${message}
        </div>`;

        // 滚动到消息区域
        messageArea.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    } else {
        // 备用方案：使用alert
        console.warn('messageArea元素不存在，使用alert显示成功消息');
        alert('成功: ' + message);
    }
}

// 清空消息
function clearMessages() {
    const messageArea = document.getElementById('messageArea');
    if (messageArea) {
        messageArea.innerHTML = '';
    }
}

// 测试错误提示功能（调试用）
function testErrorMessage() {
    console.log('测试错误提示功能');
    showError('这是一个测试错误消息');
}

// 测试成功提示功能（调试用）
function testSuccessMessage() {
    console.log('测试成功提示功能');
    showSuccess('这是一个测试成功消息');
}

// 保存出库记录
function saveOutboundRecords() {
    console.log('=== 开始保存出库记录 ===');

    // 测试错误提示功能
    console.log('测试messageArea元素:', document.getElementById('messageArea'));

    if (!hot) {
        console.log('❌ 表格未初始化');
        showError('表格未初始化，请刷新页面重试');
        return;
    }
    console.log('✅ 表格已初始化');

    // 获取公共信息
    const outboundTime = document.getElementById('outbound_time').value;
    const outboundPlate = document.getElementById('outbound_plate').value;
    const targetWarehouse = document.getElementById('target_warehouse').value;
    const warehouseAddress = document.getElementById('warehouse_address').value;
    const contactWindow = document.getElementById('contact_window').value;

    // 验证公共信息
    if (!outboundTime) {
        showError('请填写出库时间');
        return;
    }
    if (!outboundPlate) {
        showError('请填写出库/出境车牌');
        return;
    }
    if (!targetWarehouse) {
        showError('请选择目标前端仓');
        return;
    }

    // 获取表格数据
    const tableData = hot.getSourceData();
    const records = [];

    // 处理表格数据
    for (let i = 0; i < tableData.length; i++) {
        const row = tableData[i];

        // 跳过空行（客户名称为空）
        if (!row[0] || row[0].trim() === '') {
            continue;
        }

        // 验证必填字段（后端仓转前端仓的基本必填项）
        if (!row[1] || row[1].trim() === '') { // 识别编码
            showError(`第 ${i + 1} 行：识别编码不能为空`);
            return;
        }
        if (!row[2] || row[2].trim() === '') { // 入库车牌
            showError(`第 ${i + 1} 行：入库车牌不能为空`);
            return;
        }
        // 注意：订单类型、出境模式、报关行、跟单客服对于后端仓转前端仓不是必填项

        // 验证数量（至少有一项不为空）
        const palletCount = parseInt(row[4]) || 0;
        const packageCount = parseInt(row[5]) || 0;
        if (palletCount === 0 && packageCount === 0) {
            showError(`第 ${i + 1} 行：出库板数和出库件数至少填写一项`);
            return;
        }

        // 构建记录对象
        const record = {
            customer_name: row[0],
            identification_code: row[1],
            inbound_plate: row[2],
            order_type: row[3] || '',
            pallet_count: palletCount,
            package_count: packageCount,
            weight: parseFloat(row[6]) || 0,
            volume: parseFloat(row[7]) || 0,
            export_mode: row[8] || '',
            customs_broker: row[9] || '',
            service_staff: row[10] || '',
            remark1: row[11] || '',
            remark2: row[12] || '',
            outbound_time: outboundTime,
            delivery_plate_number: outboundPlate,
            plate_number: outboundPlate,
            target_warehouse: targetWarehouse,
            warehouse_address: warehouseAddress,
            contact_window: contactWindow
        };

        records.push(record);
    }

    if (records.length === 0) {
        showError('没有有效的出库记录，请先添加数据');
        return;
    }

    // 发送保存请求
    const requestData = {
        records: records
    };

    console.log('准备发送的数据:', requestData);

    // 显示加载状态
    showLoadingIndicator();
    clearMessages();

    fetch('/api/backend/outbound/return', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingIndicator();

        if (data.success) {
            showSuccess(`成功保存 ${data.saved_count} 条返回前端仓记录，批次号：${data.batch_no}`);

            // 清空表格
            setTimeout(() => {
                clearTable();
            }, 2000);
        } else {
            showError('保存失败：' + data.message);
        }
    })
    .catch(error => {
        hideLoadingIndicator();
        console.error('保存出库记录失败:', error);
        showError('保存失败：网络错误或服务器异常');
    });
}


</script>
{% endblock %}
