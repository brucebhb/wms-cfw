{% extends "base.html" %}

{% block styles %}
<link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/handsontable/13.0.0/handsontable.full.min.css">
<!-- 添加自定义表格样式 -->
<link rel="stylesheet" href="{{ url_for('static', filename='css/simple-table.css') }}" type="text/css" />
<style>
    .batch-options {
        margin-bottom: 1rem;
    }
    #hot-container {
        height: 600px;
        overflow: visible;
        margin-bottom: 20px;
        margin-left: auto;
        margin-right: auto;
        position: relative;
    }
    /* 增加表格行高的样式 */
    .handsontable td {
        height: 32px !important;
        line-height: 28px !important;
        padding: 4px 6px !important;
        font-size: 14px !important;
        text-align: center !important;
        vertical-align: middle !important;
    }
    /* 增加表头行高 */
    .handsontable th {
        height: 36px !important;
        padding: 6px 6px !important;
        font-size: 14px !important;
        font-weight: bold !important;
        text-align: center !important;
        vertical-align: middle !important;
    }
    .handsontable .required {
        color: #ff0000;
    }
    /* 表单标签中的必填项标识 */
    .required {
        color: #dc3545 !important;
        font-weight: bold;
    }
    .btn-action {
        margin-right: 8px;
    }
    /* 内容区域居中 */
    .card-body {
        text-align: center;
    }
    /* 按钮组居中 */
    .action-buttons {
        display: flex;
        justify-content: center;
        margin-bottom: 1rem;
    }
    /* 提示信息容器 */
    .info-container {
        background-color: #fff8e1;
        padding: 10px 15px;
        border-radius: 4px;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        border: 1px solid #ffe082;
    }
    /* 居中按钮组 */
    .center-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 20px 0;
    }
    /* 加载指示器 */
    #loading-indicator {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 20px;
        border-radius: 5px;
        z-index: 10000;
        display: none;
    }

    /* 自定义模态框样式 */
    .custom-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 10000;
        justify-content: center;
        align-items: center;
    }

    .custom-modal .modal-content {
        background-color: #ffffff;
        min-width: 95%;
        max-height: 90vh;
        position: relative;
        z-index: 10002 !important;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        display: flex;
        flex-direction: column;
    }

    /* 模态框固定的标题栏和底部按钮样式 */
    .modal-header-fixed {
        position: sticky;
        top: 0;
        background: #ffffff;
        z-index: 1030;
        padding: 15px 15px 0;
        border-bottom: 1px solid #dee2e6;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
    }

    .modal-footer-fixed {
        position: sticky;
        bottom: 0;
        background: white;
        z-index: 1030;
        padding: 15px;
        border-top: 1px solid #dee2e6;
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 4px;
        text-align: right;
    }

    .modal-close {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
        z-index: 1040;
        color: #555;
        transition: color 0.2s;
    }

    .modal-close:hover {
        color: #000;
    }

    .search-container {
        padding: 10px 15px;
        background: white;
    }

    /* 全出按钮样式 */
    .btn-full-out {
        padding: 2px 8px;
        font-size: 12px;
        line-height: 1.5;
    }

    /* 出库数量输入框样式 */
    .outbound-pallet, .outbound-package {
        width: 80px;
        text-align: center;
    }

    /* 移除数字输入框的上下调整按钮 */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type="number"] {
        -moz-appearance: textfield;
    }
</style>
{% endblock %}

{% block title %}前端仓直接配送客户{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- 页面标题 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card {% if destination == 'chunjiang' %}border-success{% else %}border-primary{% endif %}">
                <div class="card-header {% if destination == 'chunjiang' %}bg-success{% else %}bg-primary{% endif %} text-white">
                    <h3 class="card-title mb-0">
                        {% if destination == 'chunjiang' %}
                        <i class="fas fa-shipping-fast me-2"></i>前端仓发货到凭祥北投仓
                        <span class="badge bg-light text-success ms-2">Transfer to Backend</span>
                        {% else %}
                        <i class="fas fa-truck me-2"></i>前端仓直接配送客户工厂
                        <span class="badge bg-light text-primary ms-2">Direct Delivery</span>
                        {% endif %}
                    </h3>
                </div>
                <div class="card-body">
                    <p class="card-text mb-0">
                        <i class="fas fa-info-circle me-1"></i>
                        {% if destination == 'chunjiang' %}
                        前端仓集拼货物发往凭祥北投仓，货物将转移到后端仓库存
                        {% else %}
                        从前端仓直接配送货物到客户工厂
                        {% endif %}
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- 上层：公共数据区域 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="fas fa-clipboard-list me-2"></i>公共信息
                    </h5>
                </div>
                <div class="card-body">
                    <form id="commonForm">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>

                        <!-- 第一行：批次号/出库时间/始发仓/目的地/收货人联系方式 -->
                        <div class="row">
                            {% if destination != 'chunjiang' %}
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label for="batch_number" class="form-label">批次号 <span class="required">*</span></label>
                                    <input type="text" class="form-control" id="batch_number" name="batch_number" required placeholder="批次编号">
                                </div>
                            </div>
                            {% else %}
                            <!-- 春疆货场出库时批次号自动生成，不显示输入框 -->
                            <input type="hidden" id="batch_number" name="batch_number" value="">
                            {% endif %}
                            <div class="{% if destination == 'chunjiang' %}col-md-3{% else %}col-md-2{% endif %}">
                                <div class="mb-3">
                                    <label for="outbound_time" class="form-label" style="font-size: 16px; font-weight: bold; color: #2c3e50;">出库时间 <span class="required">*</span></label>
                                    <input type="date" class="form-control" id="outbound_time" name="outbound_time" required>
                                </div>
                            </div>
                            <div class="{% if destination == 'chunjiang' %}col-md-3{% else %}col-md-2{% endif %}">
                                <div class="mb-3">
                                    <label for="origin_warehouse" class="form-label">始发仓 <span class="required">*</span></label>
                                    {% if destination == 'chunjiang' %}
                                    <input type="text" class="form-control" id="origin_warehouse" name="origin_warehouse" required
                                           value="凭祥北投仓" readonly>
                                    {% else %}
                                    {% if is_admin %}
                                    <input type="text" class="form-control" id="origin_warehouse" name="origin_warehouse" required
                                           placeholder="始发仓库">
                                    {% else %}
                                    <input type="text" class="form-control" id="origin_warehouse" name="origin_warehouse" required
                                           {% if user_warehouse_name %}
                                           value="{{ user_warehouse_name }}" readonly
                                           {% else %}
                                           placeholder="始发仓库"
                                           {% endif %}>
                                    {% endif %}
                                    {% endif %}
                                </div>
                            </div>
                            <div class="{% if destination == 'chunjiang' %}col-md-3{% else %}col-md-3{% endif %}">
                                <div class="mb-3">
                                    <label for="factory_address" class="form-label">目的地 <span class="required">*</span></label>
                                    {% if destination == 'chunjiang' %}
                                    <select class="form-control" id="factory_address" name="factory_address" required>
                                        <option value="春疆货场" selected>春疆货场</option>
                                        <option value="凭祥保税仓">凭祥保税仓</option>
                                    </select>
                                    {% else %}
                                    <input type="text" class="form-control" id="factory_address" name="factory_address" required placeholder="详细目的地地址">
                                    {% endif %}
                                </div>
                            </div>
                            <div class="{% if destination == 'chunjiang' %}col-md-3{% else %}col-md-3{% endif %}">
                                <div class="mb-3">
                                    <label for="receiver_contact" class="form-label">收货人联系方式 <span class="required">*</span></label>
                                    <input type="text" class="form-control" id="receiver_contact" name="receiver_contact" required placeholder="姓名/电话">
                                </div>
                            </div>
                        </div>
                        <!-- 第二行：出库车牌/车型/车挂/柜号/归属车队/车队电话 -->
                        <div class="row">
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label for="plate_number" class="form-label">出库车牌 <span class="required">*</span></label>
                                    <input type="text" class="form-control" id="plate_number" name="plate_number" required placeholder="车牌号">
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label for="vehicle_type" class="form-label">车型 <span class="required">*</span></label>
                                    <input type="text" class="form-control" id="vehicle_type" name="vehicle_type" required placeholder="车辆类型">
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label for="trailer_number" class="form-label">车挂</label>
                                    <input type="text" class="form-control" id="trailer_number" name="trailer_number" placeholder="挂车号">
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label for="container_number" class="form-label">柜号</label>
                                    <input type="text" class="form-control" id="container_number" name="container_number" placeholder="集装箱号">
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label for="fleet_company" class="form-label">归属车队 <span class="required">*</span></label>
                                    <input type="text" class="form-control" id="fleet_company" name="fleet_company" required placeholder="车队名称">
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label for="fleet_phone" class="form-label">车队电话 <span class="required">*</span></label>
                                    <input type="text" class="form-control" id="fleet_phone" name="fleet_phone" required placeholder="车队联系电话">
                                </div>
                            </div>
                        </div>
                        <!-- 第三行：详细地址/CFW联络窗口 -->
                        <div class="row">
                            <div class="col-md-9">
                                <div class="mb-3">
                                    <label for="detailed_address" class="form-label">详细地址</label>
                                    <input type="text" class="form-control" id="detailed_address" name="detailed_address" placeholder="详细收货地址">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label for="contact_person" class="form-label">CFW联络窗口 <span class="required">*</span></label>
                                    <input type="text" class="form-control" id="contact_person" name="contact_person" required
                                           {% if destination == 'chunjiang' %}
                                           value="金英/84-971886919  石辉远/18685570447"
                                           {% else %}
                                           placeholder="联系人信息"
                                           {% endif %}>
                                </div>
                            </div>
                        </div>
                        <!-- 第四行：整车货物重量（自动计算） -->
                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label for="total_weight" class="form-label">整车货物重量(KG)</label>
                                    <input type="number" class="form-control" id="total_weight" name="total_weight" step="0.01" readonly placeholder="自动计算">
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- 下层：表格区域 -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="fas fa-table me-2"></i>出库货物明细
                    </h5>
                </div>
                <div class="card-body">
                    <!-- 操作说明 -->
                    <div class="info-container">
                        <i class="fas fa-info-circle me-1"></i> <span class="required">*</span> 为必填项。公共信息中
                        {% if destination == 'chunjiang' %}
                        <span class="required">出库时间、始发仓、目的地、出库车牌、车型、归属车队、车队电话、CFW联络窗口、收货人联系方式</span>必填（批次号自动生成），
                        {% else %}
                        <span class="required">批次号、出库时间、始发仓、目的地、出库车牌、车型、归属车队、车队电话、CFW联络窗口、收货人联系方式</span>必填，
                        {% endif %}
                        <span class="required">车挂、柜号</span>为选填；表格中<span class="required">客户名称、识别编码</span>必填，<span class="required">板数</span>与<span class="required">件数</span>至少填写一项，<span class="required">出库重量</span>必须在选择界面为每个货物单独输入。整车货物重量将在出库选择完成后自动计算。
                    </div>

                    <div class="center-buttons">
                        <!-- 出库选择按钮 -->
                        <button type="button" class="btn btn-info" id="selectInventoryBtn" onclick="openInventoryModal()"
                                data-action="select" title="选择要出库的库存记录">
                            <i class="fas fa-warehouse"></i> 出库选择
                        </button>
                        <button type="button" class="btn btn-secondary" id="resetBtn" onclick="resetForm()"
                                data-action="reset" data-confirm="确定要重置所有数据吗？" title="清空所有已填写的数据">
                            <i class="fas fa-undo"></i> 重置
                        </button>
                        <button type="button" class="btn btn-primary" id="saveBtn" onclick="saveOutboundRecords()"
                                data-action="save" title="保存所有出库记录">
                            <i class="fas fa-save"></i> 批量保存
                        </button>
                        <a href="{{ url_for('main.frontend_outbound') }}" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left"></i> 返回
                        </a>
                    </div>

                    <!-- 表格区域 -->
                    <div id="hot-container"></div>

                    <!-- 加载指示器 -->
                    <div id="loading-indicator">
                        <i class="fas fa-spinner fa-spin"></i> 正在加载...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- 出库选择模态框 -->
<div id="inventoryModal" class="custom-modal">
    <div class="modal-content">
        <!-- 固定的标题栏 -->
        <div class="modal-header-fixed">
            <span class="modal-close" onclick="closeInventoryModal()">&times;</span>
            <div class="modal-header">
                <h5><i class="fas fa-boxes"></i>
                {% if destination == 'chunjiang' %}
                前端仓库存选择 - 发货到凭祥北投仓
                {% else %}
                前端仓库存选择 - 直接配送客户
                {% endif %}
                </h5>
            </div>
            <div class="search-container">
                <div class="row">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" id="inventorySearch" placeholder="输入客户名称、识别编码或车牌号搜索...">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="text-end">
                            <span class="badge bg-info" id="inventoryCount">加载中...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 可滚动的内容区域 -->
        <div class="modal-body" style="overflow-y: auto; flex: 1;">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="inventoryTable" width="100%">
                    <thead>
                        <tr>
                            <th>选择</th>
                            <th>客户名称</th>
                            <th>送货干线车</th>
                            <th>入库车牌</th>
                            <th>识别编码</th>
                            <th>订单类型</th>
                            <th>入库板数</th>
                            <th>入库件数</th>
                            <th>库存板数</th>
                            <th>库存件数</th>
                            <th>全出</th>
                            <th>出库板数</th>
                            <th>出库件数</th>
                            <th>出库重量(kg)</th>
                            <th>重量(kg)</th>
                            <th>体积(m³)</th>
                            <th>出境模式</th>
                            <th>报关行</th>
                            <th>跟单客服</th>
                            <th>库位</th>
                            <th>单据</th>
                            <th>入库时间</th>
                        </tr>
                    </thead>
                    <tbody id="inventoryTableBody">
                        <tr>
                            <td colspan="22" class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <div class="mt-2">正在加载库存数据...</div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- 固定的底部按钮 -->
        <div class="modal-footer-fixed">
            <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">
                    <i class="fas fa-info-circle"></i>
                    只显示有库存的记录，选择一条记录后点击确认选择
                </small>
                <div>
                    <button type="button" class="btn btn-secondary me-2" onclick="closeInventoryModal()">
                        <i class="fas fa-times"></i> 取消
                    </button>
                    <button type="button" class="btn btn-primary" id="confirmInventorySelection"
                            data-action="confirm" title="确认选择的库存记录">
                        <i class="fas fa-check"></i> 确认选择
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.bootcdn.net/ajax/libs/handsontable/13.0.0/handsontable.full.min.js"></script>

<script>
// 全局变量
let inventoryData = [];
let hot = null;

document.addEventListener('DOMContentLoaded', function() {
    // 设置默认日期为当前日期
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');

    const defaultDate = `${year}-${month}-${day}`;
    document.getElementById('outbound_time').value = defaultDate;

    // 初始化表格
    initSpreadsheet();

    // 设置确认选择按钮事件
    document.getElementById('confirmInventorySelection').addEventListener('click', confirmInventorySelection);

    // 设置搜索功能
    document.getElementById('inventorySearch').addEventListener('input', function() {
        const searchText = this.value.toLowerCase().trim();
        const rows = document.querySelectorAll('#inventoryTableBody tr[data-index]');
        let visibleCount = 0;

        rows.forEach(row => {
            if (searchText === '') {
                row.style.display = '';
                visibleCount++;
            } else {
                const cells = row.querySelectorAll('td');
                let found = false;

                // 搜索客户名称、识别编码、车牌号
                const customerName = cells[1]?.textContent.toLowerCase() || '';
                const plateNumber = cells[2]?.textContent.toLowerCase() || '';
                const identificationCode = cells[3]?.getAttribute('title')?.toLowerCase() || cells[3]?.textContent.toLowerCase() || '';
                const orderType = cells[4]?.textContent.toLowerCase() || '';
                const serviceStaff = cells[11]?.textContent.toLowerCase() || '';

                if (customerName.includes(searchText) ||
                    plateNumber.includes(searchText) ||
                    identificationCode.includes(searchText) ||
                    orderType.includes(searchText) ||
                    serviceStaff.includes(searchText)) {
                    found = true;
                    visibleCount++;
                }

                row.style.display = found ? '' : 'none';
            }
        });

        // 更新搜索结果计数
        const inventoryCount = document.getElementById('inventoryCount');
        if (inventoryCount && searchText !== '') {
            inventoryCount.textContent = `${visibleCount} 条匹配记录`;
            inventoryCount.className = visibleCount > 0 ? 'badge bg-warning' : 'badge bg-secondary';
        } else if (inventoryCount && searchText === '') {
            // 恢复原始计数
            const totalRows = document.querySelectorAll('#inventoryTableBody tr[data-index]').length;
            inventoryCount.textContent = `${totalRows} 条可用记录`;
            inventoryCount.className = 'badge bg-success';
        }
    });

    // 初始化凭祥保税仓/春疆货场的默认值和事件监听器
    {% if destination == 'chunjiang' %}
    // 设置默认值
    const originWarehouseField = document.getElementById('origin_warehouse');
    const factoryAddressField = document.getElementById('factory_address');

    if (originWarehouseField) {
        originWarehouseField.value = '凭祥北投仓';
        console.log('已设置始发仓为凭祥北投仓');
        // 初始化时获取始发仓的联络窗口和地址信息
        updateOriginWarehouseInfo('凭祥北投仓');
    }

    if (factoryAddressField) {
        // 获取当前选中的值（应该是HTML中设置的默认值）
        const currentDestination = factoryAddressField.value;
        console.log('当前目的地值:', currentDestination);

        // 如果没有值，设置为春疆货场
        if (!currentDestination) {
            factoryAddressField.value = '春疆货场';
            console.log('已设置默认目的地为春疆货场');
        }

        // 绑定目的地选择变化事件
        factoryAddressField.addEventListener('change', function() {
            const selectedDestination = this.value;
            console.log('目的地选择变化:', selectedDestination);
            if (selectedDestination) {
                loadReceiverInfo(selectedDestination);
            }
        });
        console.log('已绑定目的地选择变化事件监听器');

        // 初始化时加载当前选中目的地的收货人信息
        const finalDestination = factoryAddressField.value || '春疆货场';
        setTimeout(() => {
            console.log('初始化加载收货人信息:', finalDestination);
            loadReceiverInfo(finalDestination);
        }, 100); // 短暂延迟确保所有字段都已准备好
    } else {
        console.error('未找到factory_address字段');
    }
    {% endif %}

    // 添加始发仓变化监听器和初始化
    const originWarehouseField = document.getElementById('origin_warehouse');
    if (originWarehouseField) {
        // 初始化时获取始发仓信息
        const initialWarehouse = originWarehouseField.value.trim();
        if (initialWarehouse) {
            updateOriginWarehouseInfo(initialWarehouse);
        }

        // 只有非只读字段才添加事件监听器
        if (!originWarehouseField.readOnly) {
            originWarehouseField.addEventListener('change', function() {
                const warehouseName = this.value.trim();
                if (warehouseName) {
                    updateOriginWarehouseInfo(warehouseName);
                }
            });

            originWarehouseField.addEventListener('blur', function() {
                const warehouseName = this.value.trim();
                if (warehouseName) {
                    updateOriginWarehouseInfo(warehouseName);
                }
            });
        }
    }

    // 隐藏加载指示器
    hideLoadingIndicator();
});

// 更新始发仓信息的函数
function updateOriginWarehouseInfo(warehouseName) {
    console.log('更新始发仓信息:', warehouseName);

    // 检查必要的DOM元素是否存在
    const detailedAddressField = document.getElementById('detailed_address');
    const contactPersonField = document.getElementById('contact_person');

    console.log('详细地址字段存在:', !!detailedAddressField);
    console.log('联络窗口字段存在:', !!contactPersonField);

    // 发送API请求获取始发仓信息
    const apiUrl = `/api/receiver/by_warehouse/${encodeURIComponent(warehouseName)}`;
    console.log('API请求URL:', apiUrl);

    fetch(apiUrl)
        .then(response => {
            console.log('API响应状态:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('API响应数据:', data);
            if (data.success && data.receiver) {
                // 更新详细地址字段（始发仓地址）
                const detailedAddressField = document.getElementById('detailed_address');
                if (detailedAddressField && data.receiver.address) {
                    detailedAddressField.value = data.receiver.address;
                    console.log('已更新始发仓地址:', data.receiver.address);
                }

                // 更新联络窗口字段（始发仓联络窗口）
                const contactPersonField = document.getElementById('contact_person');
                if (contactPersonField && data.receiver.contact) {
                    contactPersonField.value = data.receiver.contact;
                    console.log('已更新始发仓联络窗口:', data.receiver.contact);
                }
            } else {
                console.log('未找到始发仓信息:', data.message);
                // 如果没有找到始发仓信息，清空字段
                const detailedAddressField = document.getElementById('detailed_address');
                if (detailedAddressField) {
                    detailedAddressField.value = '';
                }

                const contactPersonField = document.getElementById('contact_person');
                if (contactPersonField) {
                    // 对于特殊仓库，使用默认值
                    if (warehouseName === '凭祥北投仓') {
                        contactPersonField.value = '金英/84-971886919  石辉远/18685570447';
                    } else {
                        contactPersonField.value = '';
                    }
                }
            }
        })
        .catch(error => {
            console.error('获取始发仓信息失败:', error);
            // 错误处理：对于特殊仓库，使用默认值
            const contactPersonField = document.getElementById('contact_person');
            if (contactPersonField && warehouseName === '凭祥北投仓') {
                contactPersonField.value = '金英/84-971886919  石辉远/18685570447';
            }
        });
}

// 验证和清理识别编码
function validateIdentificationCode(code) {
    if (!code) return '';

    // 转换为字符串并清理
    code = String(code).trim();

    // 检查是否是CSRF令牌格式 (通常包含点号且很长)
    if (code.includes('.') && code.length > 50) {
        console.error('检测到CSRF令牌被错误赋值:', code.substring(0, 50) + '...');
        return '[数据错误-请刷新页面]';
    }

    // 检查是否包含JWT特征 (eyJ开头的base64编码)
    if (code.startsWith('eyJ') || code.match(/^[A-Za-z0-9+/=]+\.[A-Za-z0-9+/=]+\.[A-Za-z0-9+/=_-]+$/)) {
        console.error('检测到JWT令牌被错误赋值:', code.substring(0, 50) + '...');
        return '[令牌错误-请刷新页面]';
    }

    // 检查是否包含HTML标签
    if (code.includes('<') || code.includes('>')) {
        console.error('检测到HTML内容被错误赋值:', code.substring(0, 50) + '...');
        return '[HTML错误-请刷新页面]';
    }

    // 检查长度是否异常
    if (code.length > 100) {
        console.error('识别编码长度异常:', code.length, code.substring(0, 50) + '...');
        return '[长度异常-请刷新页面]';
    }

    return code;
}

// 初始化表格
function initSpreadsheet() {
    const container = document.getElementById('hot-container');
    if (!container) {
        console.error('找不到表格容器');
        return;
    }

    // 表格列定义 - 根据目的地动态调整字段
    let columns = [];

    {% if destination == 'chunjiang' %}
    // 前端仓发货到后端仓的字段（使用前端仓字段，不需要出境模式和报关行）
    columns = [
        { data: 'customer_name', title: '客户名称 <span class="required">*</span>', width: 120 },
        { data: 'identification_code', title: '识别编码 <span class="required">*</span>', width: 120 },
        { data: 'order_type', title: '订单类型', width: 100 },
        { data: 'delivery_truck', title: '送货干线车', width: 100 },
        { data: 'inbound_plate', title: '入库车牌', width: 100 },
        { data: 'pallet_count', title: '板数', width: 80, type: 'numeric' },
        { data: 'package_count', title: '件数', width: 80, type: 'numeric' },
        { data: 'weight', title: '重量(kg)', width: 80, type: 'numeric' },
        { data: 'volume', title: '体积(m³)', width: 80, type: 'numeric' },
        { data: 'service_staff', title: '跟单客服', width: 100 },
        { data: 'documents', title: '单据', width: 80 },
        { data: 'remark1', title: '备注1', width: 150 },
        { data: 'remark2', title: '备注2', width: 150 }
    ];
    {% else %}
    // 前端仓直接配送客户的字段
    columns = [
        { data: 'customer_name', title: '客户名称 <span class="required">*</span>', width: 120 },
        { data: 'identification_code', title: '识别编码 <span class="required">*</span>', width: 120 },
        { data: 'order_type', title: '订单类型', width: 100 },
        { data: 'pallet_count', title: '板数', width: 80, type: 'numeric' },
        { data: 'package_count', title: '件数', width: 80, type: 'numeric' },
        { data: 'weight', title: '重量(kg)', width: 80, type: 'numeric' },
        { data: 'volume', title: '体积(m³)', width: 80, type: 'numeric' },
        { data: 'service_staff', title: '跟单客服', width: 100 },
        { data: 'documents', title: '单据', width: 80 },
        { data: 'remark1', title: '备注1', width: 150 },
        { data: 'remark2', title: '备注2', width: 150 }
    ];
    {% endif %}

    // 初始化Handsontable
    hot = new Handsontable(container, {
        data: [],
        columns: columns,
        colHeaders: columns.map(col => col.title),
        rowHeaders: true,
        width: '100%',
        height: 500,
        licenseKey: 'non-commercial-and-evaluation',
        stretchH: 'all',
        autoWrapRow: true,
        autoWrapCol: true,
        manualColumnResize: true,
        manualRowResize: true,
        contextMenu: true,
        copyPaste: true,
        fillHandle: true,
        filters: true,
        dropdownMenu: true,
        multiColumnSorting: true,
        columnSorting: true,
        sortIndicator: true,
        allowInsertRow: true,
        allowRemoveRow: true,
        minRows: 10,
        maxRows: 1000,
        className: 'htCenter htMiddle'
    });

    window.hot = hot;
    console.log('前端仓直接配送表格初始化完成');
}

// 打开库存选择模态框
function openInventoryModal() {
    // 调试信息：显示模板变量
    console.log('模板变量 destination:', '{{ destination }}');
    console.log('模板变量 warehouse_type:', '{{ warehouse_type }}');

    {% if destination == 'chunjiang' %}
    console.log('打开前端仓库存选择模态框 - 发货到后端仓');
    {% else %}
    console.log('打开前端仓库存选择模态框 - 直接配送客户');
    {% endif %}

    // 显示自定义模态框
    document.getElementById('inventoryModal').style.display = 'flex';

    // 前端仓出库操作，无论目的地是哪里，都应该选择前端仓的库存
    loadFrontendInventory();
}

// 关闭库存选择模态框
function closeInventoryModal() {
    console.log('关闭前端仓库存选择模态框');
    document.getElementById('inventoryModal').style.display = 'none';
}

// 加载前端仓库存数据
function loadFrontendInventory() {
    console.log('加载前端仓库存数据');

    fetch('/api/inventory/frontend')
        .then(response => response.json())
        .then(data => {
            console.log('收到前端仓库存数据:', data);
            if (data.success && data.inventory) {
                // 验证和清理数据
                const cleanedInventory = data.inventory.map(item => {
                    return {
                        ...item,
                        identification_code: validateIdentificationCode(item.identification_code || '')
                    };
                });

                inventoryData = cleanedInventory;
                populateInventoryTable(cleanedInventory);
            } else {
                console.error('获取前端仓库存数据失败:', data.message);
                showError('获取库存数据失败: ' + (data.message || '未知错误'));
            }
        })
        .catch(error => {
            console.error('获取前端仓库存数据出错:', error);
            showError('获取库存数据出错，请刷新页面后重试');
        });
}

// 加载后端仓库存数据
function loadBackendInventory() {
    console.log('加载后端仓库存数据');

    fetch('/api/backend/inventory')
        .then(response => response.json())
        .then(data => {
            console.log('收到后端仓库存数据:', data);
            if (data.success && data.data) {
                // 验证和清理数据
                const cleanedInventory = data.data.map(item => {
                    return {
                        ...item,
                        identification_code: validateIdentificationCode(item.identification_code || '')
                    };
                });

                inventoryData = cleanedInventory;
                populateInventoryTable(cleanedInventory);
            } else {
                console.error('获取后端仓库存数据失败:', data.message);
                showError('获取库存数据失败: ' + (data.message || '未知错误'));
            }
        })
        .catch(error => {
            console.error('获取后端仓库存数据出错:', error);
            showError('获取库存数据出错，请刷新页面后重试');
        });
}

// 填充库存表格
function populateInventoryTable(inventoryItems) {
    console.log('填充前端仓库存表格，数据条数:', inventoryItems.length);

    const tableBody = document.getElementById('inventoryTableBody');
    const inventoryCount = document.getElementById('inventoryCount');

    if (!tableBody) {
        console.error('找不到库存表格体元素');
        return;
    }

    // 清空表格
    tableBody.innerHTML = '';

    if (!inventoryItems || inventoryItems.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td colspan="22" class="text-center py-4">
                <div class="text-muted">
                    <i class="fas fa-inbox fa-2x mb-2"></i>
                    <div>暂无库存数据</div>
                    <small>请先进行入库操作</small>
                </div>
            </td>
        `;
        tableBody.appendChild(row);

        if (inventoryCount) {
            inventoryCount.textContent = '0 条记录';
            inventoryCount.className = 'badge bg-secondary';
        }
        return;
    }

    let validRecordCount = 0;

    // 填充表格
    inventoryItems.forEach((item, index) => {
        // 计算可用库存数量
        const availablePallets = item.available_pallets || 0;
        const availablePackages = item.available_packages || 0;

        // 只显示有库存的记录
        if (availablePallets > 0 || availablePackages > 0) {
            validRecordCount++;

            const row = document.createElement('tr');
            row.setAttribute('data-index', index);
            row.style.cursor = 'pointer';

            // 验证和清理识别编码
            let identificationCode = validateIdentificationCode(item.identification_code || '');

            // 如果太长则截断
            if (identificationCode.length > 50 && !identificationCode.includes('[')) {
                identificationCode = identificationCode.substring(0, 50) + '...';
            }

            row.innerHTML = `
                <td><input type="checkbox" class="inventory-selector" data-index="${index}"></td>
                <td>${item.customer_name || ''}</td>
                <td>${item.delivery_plate_number || ''}</td>
                <td>${item.plate_number || ''}</td>
                <td title="${item.identification_code || ''}">${identificationCode || ''}</td>
                <td>${item.order_type || ''}</td>
                <td>${item.inbound_pallet_count || 0}</td>
                <td>${item.inbound_package_count || 0}</td>
                <td>${availablePallets}</td>
                <td>${availablePackages}</td>
                <td><button type="button" class="btn btn-sm btn-outline-primary btn-full-out" data-pallets="${availablePallets}" data-packages="${availablePackages}">全出</button></td>
                <td><input type="number" class="form-control form-control-sm outbound-pallet" min="0" max="${availablePallets}" value="0"></td>
                <td><input type="number" class="form-control form-control-sm outbound-package" min="0" max="${availablePackages}" value="0"></td>
                <td><input type="number" class="form-control form-control-sm outbound-weight" step="0.01" min="0" placeholder="必填" required style="width: 50%;"></td>
                <td>${item.weight || 0}</td>
                <td>${item.volume || 0}</td>
                <td>${item.export_mode || ''}</td>
                <td>${item.customs_broker || ''}</td>
                <td>${item.service_staff || ''}</td>
                <td>${item.location || ''}</td>
                <td>${item.documents || ''}</td>
                <td>${item.inbound_time || ''}</td>
            `;

            // 添加全出按钮事件
            const fullOutBtn = row.querySelector('.btn-full-out');
            if (fullOutBtn) {
                fullOutBtn.addEventListener('click', function(e) {
                    e.stopPropagation(); // 阻止事件冒泡

                    const pallets = parseInt(this.getAttribute('data-pallets')) || 0;
                    const packages = parseInt(this.getAttribute('data-packages')) || 0;

                    const palletInput = this.closest('tr').querySelector('.outbound-pallet');
                    const packageInput = this.closest('tr').querySelector('.outbound-package');

                    if (palletInput) {
                        palletInput.value = pallets;
                    }
                    if (packageInput) {
                        packageInput.value = packages;
                    }

                    // 自动选中该行
                    const checkbox = this.closest('tr').querySelector('.inventory-selector');
                    if (checkbox) {
                        checkbox.checked = true;
                    }
                });
            }

            // 添加数量输入框验证事件
            const palletInput = row.querySelector('.outbound-pallet');
            const packageInput = row.querySelector('.outbound-package');

            if (palletInput) {
                palletInput.addEventListener('change', function() {
                    const value = parseInt(this.value) || 0;
                    const max = parseInt(this.getAttribute('max')) || 0;
                    if (value > max) {
                        this.value = max;
                        showError(`出库板数不能超过库存板数 ${max}`);
                    }
                    if (value < 0) {
                        this.value = 0;
                    }
                });

                palletInput.addEventListener('input', function() {
                    // 输入时自动选中该行
                    const checkbox = this.closest('tr').querySelector('.inventory-selector');
                    if (checkbox && parseInt(this.value) > 0) {
                        checkbox.checked = true;
                    }
                });
            }

            if (packageInput) {
                packageInput.addEventListener('change', function() {
                    const value = parseInt(this.value) || 0;
                    const max = parseInt(this.getAttribute('max')) || 0;
                    if (value > max) {
                        this.value = max;
                        showError(`出库件数不能超过库存件数 ${max}`);
                    }
                    if (value < 0) {
                        this.value = 0;
                    }
                });

                packageInput.addEventListener('input', function() {
                    // 输入时自动选中该行
                    const checkbox = this.closest('tr').querySelector('.inventory-selector');
                    if (checkbox && parseInt(this.value) > 0) {
                        checkbox.checked = true;
                    }
                });
            }

            // 添加点击行选择功能
            row.addEventListener('click', function(e) {
                // 如果点击的是复选框、全出按钮或输入框，不需要额外处理
                if (e.target.type === 'checkbox' || e.target.classList.contains('btn-full-out') ||
                    e.target.type === 'number') {
                    return;
                }

                const checkbox = row.querySelector('input[type="checkbox"]');
                if (checkbox) {
                    checkbox.checked = !checkbox.checked;
                }
            });

            tableBody.appendChild(row);
        }
    });

    // 更新记录计数
    if (inventoryCount) {
        inventoryCount.textContent = `${validRecordCount} 条可用记录`;
        inventoryCount.className = validRecordCount > 0 ? 'badge bg-success' : 'badge bg-secondary';
    }

    console.log(`显示了 ${validRecordCount} 条有库存的记录`);
}

// 确认库存选择
function confirmInventorySelection() {
    console.log('确认前端仓库存选择');
    const selectedCheckboxes = document.querySelectorAll('.inventory-selector:checked');

    if (selectedCheckboxes.length === 0) {
        OperationHelper.showWarning('outbound', 'no_inventory_selected');
        return;
    }

    const selectedItems = [];
    let hasError = false;

    // 遍历所有选中的记录
    selectedCheckboxes.forEach(checkbox => {
        const index = parseInt(checkbox.getAttribute('data-index'));
        const selectedItem = inventoryData[index];

        if (!selectedItem) {
            showError('无法获取选中的库存记录数据，请刷新页面后重试');
            hasError = true;
            return;
        }

        // 获取用户输入的出库数量和重量
        const selectedRow = checkbox.closest('tr');
        const outboundPallets = parseInt(selectedRow.querySelector('.outbound-pallet').value) || 0;
        const outboundPackages = parseInt(selectedRow.querySelector('.outbound-package').value) || 0;
        const outboundWeight = parseFloat(selectedRow.querySelector('.outbound-weight').value) || 0;

        // 验证出库数量
        if (outboundPallets === 0 && outboundPackages === 0) {
            showWarning(`客户 ${selectedItem.customer_name || '未知'} 的记录请输入出库板数或出库件数`);
            hasError = true;
            return;
        }

        // 验证出库数量不超过库存
        const availablePallets = selectedItem.pallet_count || 0;
        const availablePackages = selectedItem.package_count || 0;

        if (outboundPallets > availablePallets) {
            showWarning(`客户 ${selectedItem.customer_name || '未知'} 的出库板数 ${outboundPallets} 不能超过库存板数 ${availablePallets}`);
            hasError = true;
            return;
        }

        if (outboundPackages > availablePackages) {
            showWarning(`客户 ${selectedItem.customer_name || '未知'} 的出库件数 ${outboundPackages} 不能超过库存件数 ${availablePackages}`);
            hasError = true;
            return;
        }

        // 验证出库重量必填
        if (outboundWeight <= 0) {
            showWarning(`客户 ${selectedItem.customer_name || '未知'} 的出库重量不能为空，请输入实际出库重量`);
            hasError = true;
            return;
        }

        // 将出库数量和重量添加到选中的库存记录中
        const itemCopy = { ...selectedItem };
        itemCopy.outbound_pallet_count = outboundPallets;
        itemCopy.outbound_package_count = outboundPackages;
        itemCopy.outbound_weight = outboundWeight;

        selectedItems.push(itemCopy);
    });

    if (hasError) {
        return;
    }

    console.log('选中的前端仓库存记录:', selectedItems);

    // 关闭自定义模态框
    closeInventoryModal();

    // 将所有选中的数据添加到表格
    selectedItems.forEach(item => {
        addInventoryToTable(item);
    });

    // 最后统一计算总重量（避免重复计算）
    calculateTotalWeight();

    // 显示成功消息
    OperationHelper.showSuccess('outbound', 'select_inventory', selectedItems.length);
}

// 将库存数据添加到表格
function addInventoryToTable(item) {
    if (!hot) {
        alert('表格未初始化，请刷新页面后重试');
        return;
    }

    // 验证和清理识别编码
    let identificationCode = validateIdentificationCode(item.identification_code || '');

    // 如果太长则截断（但保留错误提示）
    if (identificationCode.length > 50 && !identificationCode.includes('[')) {
        identificationCode = identificationCode.substring(0, 50);
        console.warn('识别编码过长，已截断:', item.identification_code);
    }

    // 构建表格行数据对象
    const rowData = {
        customer_name: item.customer_name || '',                    // 客户名称
        identification_code: identificationCode,                    // 识别编码（已清理）
        order_type: item.order_type || '',                         // 订单类型
        {% if destination == 'chunjiang' %}
        export_mode: item.export_mode || '',                       // 出境模式
        customs_broker: item.customs_broker || '',                 // 报关行
        delivery_truck: item.delivery_plate_number || '',          // 送货干线车
        inbound_plate: item.inbound_plate || '',                   // 入库车牌
        {% endif %}
        pallet_count: item.outbound_pallet_count || 0,             // 板数（使用用户输入的出库数量）
        package_count: item.outbound_package_count || 0,           // 件数（使用用户输入的出库数量）
        weight: item.outbound_weight || item.weight || 0,         // 重量（优先使用用户输入的出库重量）
        volume: item.volume || 0,                                  // 体积
        service_staff: item.service_staff || '',                   // 跟单客服
        documents: '',                                             // 单据
        remark1: '',                                               // 备注1
        remark2: ''                                                // 备注2
    };

    // 获取现有数据
    const existingData = hot.getSourceData();

    // 过滤掉空行
    const validExistingData = existingData.filter(row => {
        if (!row) return false;
        return Object.values(row).some(value =>
            value !== null && value !== undefined && value !== ''
        );
    });

    // 检查是否已存在相同的记录（基于客户名称和识别编码）
    const existingIndex = validExistingData.findIndex(row =>
        row.customer_name === rowData.customer_name &&
        row.identification_code === rowData.identification_code
    );

    let newData;
    let actionMessage = '';

    if (existingIndex !== -1) {
        // 找到相同记录，检查数量和重量是否相同
        const existingRow = validExistingData[existingIndex];
        const isSameQuantity = (
            existingRow.pallet_count === rowData.pallet_count &&
            existingRow.package_count === rowData.package_count &&
            Math.abs(existingRow.weight - rowData.weight) < 0.01 // 浮点数比较
        );

        if (isSameQuantity) {
            // 完全相同的记录，不添加（避免重复累加）
            console.log('发现重复记录，跳过添加:', rowData.customer_name, rowData.identification_code);
            actionMessage = '重复记录已跳过';
            return; // 直接返回，不更新表格
        } else {
            // 相同记录但数量/重量不同，进行替换（顶替）
            console.log('发现相同记录但数量/重量不同，进行替换:', rowData.customer_name, rowData.identification_code);
            validExistingData[existingIndex] = rowData;
            newData = validExistingData;
            actionMessage = '已替换现有记录';
        }
    } else {
        // 新记录，直接添加
        newData = [...validExistingData, rowData];
        actionMessage = '已添加新记录';
    }

    // 更新表格
    hot.loadData(newData);

    console.log(`已将库存记录添加到表格: ${actionMessage}`);
}

// 计算整车货物重量
function calculateTotalWeight() {
    if (!hot) return;

    const data = hot.getData();
    let totalWeight = 0;

    // 根据目的地确定重量列的索引
    {% if destination == 'chunjiang' %}
    const weightColumnIndex = 9; // 春疆货场：重量在第10列（索引9）
    {% else %}
    const weightColumnIndex = 5; // 直接配送：重量在第6列（索引5）
    {% endif %}

    // 遍历所有行，累加重量
    data.forEach(row => {
        if (row && row.length > weightColumnIndex) { // 确保行有足够的列
            const weight = parseFloat(row[weightColumnIndex]) || 0;
            totalWeight += weight;
        }
    });

    // 更新整车货物重量字段
    const totalWeightField = document.getElementById('total_weight');
    if (totalWeightField) {
        totalWeightField.value = totalWeight.toFixed(2);
    }

    console.log('整车货物重量已更新:', totalWeight.toFixed(2), 'KG');
}

// 重置表单
function resetForm() {
    if (hot) {
        hot.loadData([]);
        showSuccess('表格已重置');
    }

    // 重置公共信息表单
    document.getElementById('commonForm').reset();

    // 重新设置默认日期
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');

    const defaultDate = `${year}-${month}-${day}`;
    document.getElementById('outbound_time').value = defaultDate;

    // 重新设置凭祥保税仓/春疆货场的默认值
    {% if destination == 'chunjiang' %}
    document.getElementById('origin_warehouse').value = '凭祥北投仓';
    document.getElementById('contact_person').value = '金英/84-971886919  石辉远/18685570447';
    // 目的地现在是下拉选择，默认选择春疆货场
    document.getElementById('factory_address').value = '春疆货场';
    {% endif %}

    // 重置整车货物重量
    document.getElementById('total_weight').value = '';
}

// 保存出库记录
function saveOutboundRecords() {
    if (!hot) {
        showError('表格未初始化，请刷新页面后重试');
        return;
    }

    const data = hot.getData();
    const validData = data.filter(row =>
        row.some(cell => cell !== null && cell !== undefined && cell !== '')
    );

    if (validData.length === 0) {
        OperationHelper.showWarning('outbound', 'no_inventory_selected');
        return;
    }

    // 获取公共信息
    let batchNumber = document.getElementById('batch_number').value;
    const outboundTime = document.getElementById('outbound_time').value;
    const originWarehouse = document.getElementById('origin_warehouse').value;
    const factoryAddress = document.getElementById('factory_address').value;
    const plateNumber = document.getElementById('plate_number').value;
    const vehicleType = document.getElementById('vehicle_type').value;
    const trailerNumber = document.getElementById('trailer_number').value;
    const containerNumber = document.getElementById('container_number').value;
    const fleetCompany = document.getElementById('fleet_company').value;
    const fleetPhone = document.getElementById('fleet_phone').value;
    const contactPerson = document.getElementById('contact_person').value;
    const receiverContact = document.getElementById('receiver_contact').value;
    const detailedAddress = document.getElementById('detailed_address').value;
    const totalWeight = document.getElementById('total_weight').value;

    // 检查是否为后端仓最终出库（自动生成批次号）
    const isBackendFinalOutbound = originWarehouse === '凭祥北投仓' && (factoryAddress === '春疆货场' || factoryAddress === '凭祥保税仓');

    // 如果是后端仓最终出库，自动生成批次号
    if (isBackendFinalOutbound && !batchNumber) {
        // 通过API获取下一个批次号
        generateBackendFinalBatchNumber()
            .then(generatedBatchNumber => {
                batchNumber = generatedBatchNumber;
                document.getElementById('batch_number').value = batchNumber;

                // 继续执行保存逻辑
                continueWithSave(batchNumber);
            })
            .catch(error => {
                console.error('生成批次号失败:', error);
                showError('生成批次号失败，请重试');
            });
        return; // 等待异步生成完成
    }

    // 非后端仓最终出库，使用原有逻辑
    continueWithSave(batchNumber);
}

// 生成后端仓最终出库批次号
async function generateBackendFinalBatchNumber() {
    try {
        const response = await fetch('/api/generate/chunjiang/batch', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': document.querySelector('meta[name=csrf-token]').getAttribute('content')
            }
        });

        const data = await response.json();
        if (data.success) {
            return data.batch_number;
        } else {
            throw new Error(data.message || '生成批次号失败');
        }
    } catch (error) {
        console.error('生成后端仓最终出库批次号失败:', error);
        throw error;
    }
}

// 继续执行保存逻辑（批次号已生成或已验证）
function continueWithSave(batchNumber) {
    const outboundTime = document.getElementById('outbound_time').value;
    const originWarehouse = document.getElementById('origin_warehouse').value;
    const factoryAddress = document.getElementById('factory_address').value;
    const plateNumber = document.getElementById('plate_number').value;
    const vehicleType = document.getElementById('vehicle_type').value;
    const trailerNumber = document.getElementById('trailer_number').value;
    const containerNumber = document.getElementById('container_number').value;
    const fleetCompany = document.getElementById('fleet_company').value;
    const fleetPhone = document.getElementById('fleet_phone').value;
    const contactPerson = document.getElementById('contact_person').value;
    const receiverContact = document.getElementById('receiver_contact').value;
    const detailedAddress = document.getElementById('detailed_address').value;
    const totalWeight = document.getElementById('total_weight').value;

    // 检查是否为后端仓最终出库
    const isBackendFinalOutbound = originWarehouse === '凭祥北投仓' && (factoryAddress === '春疆货场' || factoryAddress === '凭祥保税仓');

    // 验证公共信息必填字段
    const requiredFields = [];

    // 只有非后端仓最终出库才需要验证批次号
    if (!isBackendFinalOutbound) {
        requiredFields.push({ value: batchNumber, name: '批次号' });
    }

    requiredFields.push(
        { value: outboundTime, name: '出库时间' },
        { value: originWarehouse, name: '始发仓' },
        { value: factoryAddress, name: '目的地' },
        { value: plateNumber, name: '出库车牌' },
        { value: vehicleType, name: '车型' },
        { value: fleetCompany, name: '归属车队' },
        { value: fleetPhone, name: '车队电话' },
        { value: contactPerson, name: 'CFW联络窗口' },
        { value: receiverContact, name: '收货人联系方式' }
    );

    const missingFields = requiredFields.filter(field => !field.value || field.value.trim() === '');
    if (missingFields.length > 0) {
        const missingNames = missingFields.map(field => field.name).join('、');
        showWarning('请填写完整的必填信息：' + missingNames);
        return;
    }

    // 继续原有的保存逻辑
    const data = hot.getData();
    const validData = data.filter(row =>
        row.some(cell => cell !== null && cell !== undefined && cell !== '')
    );

    if (validData.length === 0) {
        OperationHelper.showWarning('outbound', 'no_inventory_selected');
        return;
    }

    // 验证表格数据
    const errors = [];
    validData.forEach((row, index) => {
        let customer_name, identification_code, order_type, pallet_count, package_count;

        {% if destination == 'chunjiang' %}
        // 前端仓发货到后端仓字段顺序：客户名称, 识别编码, 订单类型, 送货干线车, 入库车牌, 板数, 件数, ...
        [customer_name, identification_code, order_type, , , pallet_count, package_count] = row;
        {% else %}
        // 前端仓直接配送字段顺序：客户名称, 识别编码, 订单类型, 板数, 件数, ...
        [customer_name, identification_code, order_type, pallet_count, package_count] = row;
        {% endif %}

        if (!customer_name) errors.push('第' + (index + 1) + '行：客户名称不能为空');
        if (!identification_code) errors.push('第' + (index + 1) + '行：识别编码不能为空');

        // 板数和件数至少一项必填
        const pallets = parseInt(pallet_count) || 0;
        const packages = parseInt(package_count) || 0;
        if (pallets === 0 && packages === 0) {
            if (isBackendFinalOutbound) {
                errors.push('第' + (index + 1) + '行：后端仓最终出库，板数和件数至少需要填写一项');
            } else {
                errors.push('第' + (index + 1) + '行：板数和件数至少需要填写一项');
            }
        }
    });

    if (errors.length > 0) {
        showError('数据验证失败：\n' + errors.join('\n'));
        return;
    }

    // 提交数据
    {% if destination == 'chunjiang' %}
    // 前端仓发货到后端仓数据映射
    const submitData = validData.map(row => ({
        batch_number: batchNumber,
        outbound_time: outboundTime,
        origin_warehouse: originWarehouse,
        factory_address: factoryAddress,
        plate_number: plateNumber,
        vehicle_type: vehicleType,
        trailer_number: trailerNumber,
        container_number: containerNumber,
        fleet_company: fleetCompany,
        fleet_phone: fleetPhone,
        contact_person: contactPerson,
        receiver_contact: receiverContact,
        detailed_address: detailedAddress,
        total_weight: parseFloat(totalWeight) || 0,
        customer_name: row[0],
        identification_code: row[1],
        order_type: row[2],
        export_mode: '',  // 前端仓发货到后端仓不需要出境模式
        customs_broker: '',  // 前端仓发货到后端仓不需要报关行
        delivery_truck: row[3] || '',
        inbound_plate: row[4] || '',
        pallet_count: parseInt(row[5]) || 0,
        package_count: parseInt(row[6]) || 0,
        weight: parseFloat(row[7]) || 0,
        volume: parseFloat(row[8]) || 0,
        service_staff: row[9] || '',
        documents: row[10] || '',
        remark1: row[11] || '',
        remark2: row[12] || ''
    }));
    {% else %}
    // 前端仓直接配送数据映射
    const submitData = validData.map(row => ({
        batch_number: batchNumber,
        outbound_time: outboundTime,
        origin_warehouse: originWarehouse,
        factory_address: factoryAddress,
        plate_number: plateNumber,
        vehicle_type: vehicleType,
        trailer_number: trailerNumber,
        container_number: containerNumber,
        fleet_company: fleetCompany,
        fleet_phone: fleetPhone,
        contact_person: contactPerson,
        receiver_contact: receiverContact,
        detailed_address: detailedAddress,
        total_weight: parseFloat(totalWeight) || 0,
        customer_name: row[0],
        identification_code: row[1],
        order_type: row[2],
        pallet_count: parseInt(row[3]) || 0,
        package_count: parseInt(row[4]) || 0,
        weight: parseFloat(row[5]) || 0,
        volume: parseFloat(row[6]) || 0,
        service_staff: row[7] || '',
        documents: row[8] || '',
        remark1: row[9] || '',
        remark2: row[10] || ''
    }));
    {% endif %}

    console.log('提交后端仓最终出库数据:', submitData);

    // 显示加载指示器
    showLoadingIndicator('正在保存出库记录...');

    fetch('/api/frontend/outbound/direct/batch', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('meta[name=csrf-token]').getAttribute('content')
        },
        body: JSON.stringify({ records: submitData })
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingIndicator();
        if (data.success) {
            OperationHelper.showSuccess('outbound', 'batch_save', data.count || submitData.length);
            showInfo(`批次号：${batchNumber}`);
            // 清空表格和表单
            resetForm();
        } else {
            OperationHelper.showError('outbound', 'save', data.message);
        }
    })
    .catch(error => {
        hideLoadingIndicator();
        console.error('保存出库记录出错:', error);
        OperationHelper.showError('outbound', 'save', '网络连接失败，请重试');
    });
}

// 注意：showSuccess 和 showError 函数现在由统一消息系统提供

// 显示加载指示器
function showLoadingIndicator(message = '正在加载...') {
    const indicator = document.getElementById('loading-indicator');
    if (indicator) {
        indicator.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${message}`;
        indicator.style.display = 'block';
    }
}

// 隐藏加载指示器
function hideLoadingIndicator() {
    const indicator = document.getElementById('loading-indicator');
    if (indicator) {
        indicator.style.display = 'none';
    }
}

// 根据目的地加载收货人信息
function loadReceiverInfo(warehouseName) {
    console.log('开始加载收货人信息:', warehouseName);

    // 检查必要的DOM元素是否存在
    const detailedAddressField = document.getElementById('detailed_address');
    const contactPersonField = document.getElementById('contact_person');

    console.log('详细地址字段存在:', !!detailedAddressField);
    console.log('联络窗口字段存在:', !!contactPersonField);

    // 发送API请求获取收货人信息
    const apiUrl = `/api/receiver/by_warehouse/${encodeURIComponent(warehouseName)}`;
    console.log('API请求URL:', apiUrl);

    fetch(apiUrl)
        .then(response => {
            console.log('API响应状态:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('API响应数据:', data);
            if (data.success && data.receiver) {
                // 更新详细地址字段
                const detailedAddressField = document.getElementById('detailed_address');
                if (detailedAddressField && data.receiver.address) {
                    detailedAddressField.value = data.receiver.address;
                    console.log('已更新详细地址:', data.receiver.address);
                }

                // 更新联络窗口字段
                const contactPersonField = document.getElementById('contact_person');
                if (contactPersonField && data.receiver.contact) {
                    // 对于春疆货场，使用数据库中的联络窗口信息
                    // 对于其他目的地，也使用数据库中的信息
                    contactPersonField.value = data.receiver.contact;
                    console.log('已更新联络窗口:', data.receiver.contact);
                }
            } else {
                console.log('未找到收货人信息:', data.message);
                // 如果没有找到收货人信息，清空详细地址字段
                const detailedAddressField = document.getElementById('detailed_address');
                if (detailedAddressField) {
                    detailedAddressField.value = '';
                }

                // 联络窗口字段的处理：
                // 对于春疆货场，如果数据库中没有信息，使用硬编码的默认值
                // 对于其他目的地，清空字段让用户手动输入
                const contactPersonField = document.getElementById('contact_person');
                if (contactPersonField) {
                    if (warehouseName === '春疆货场') {
                        // 春疆货场使用默认联络窗口信息
                        contactPersonField.value = '金英/84-971886919  石辉远/18685570447';
                    } else {
                        // 其他目的地清空字段
                        contactPersonField.value = '';
                    }
                }
            }
        })
        .catch(error => {
            console.error('获取收货人信息时出错:', error);
            // 发生错误时不清空字段，保持用户已输入的内容
        });
}
</script>
{% endblock %}
